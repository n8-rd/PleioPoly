//########################################################################################
//FUNCTIONS
//########################################################################################

// Function to calculate the FST between two subpopulations
// Modified from Haller and Messer's to specify a neutral mutationType
function (f$)calcFST(o<Subpopulation>$ subpop1, o<Subpopulation>$ subpop2, o<MutationType>$ NeutralMutType)
{
	inds = sim.subpopulations.individuals;
	mutts = inds.genomes.mutationsOfType(NeutralMutType);
	p1_p = sim.mutationFrequencies(subpop1,mutts);
	p2_p = sim.mutationFrequencies(subpop2,mutts);
	mean_p = (p1_p + p2_p) / 2.0;
	H_t = 2.0 * mean_p * (1.0 - mean_p); //expected H 2*p-bar*q-bar
	H_s = p1_p * (1.0 - p1_p) + p2_p * (1.0 - p2_p);
	fst = 1.0 - H_s/H_t;
	fst = fst[!isNAN(fst)];  // exclude muts where mean_p is 0.0 or 1.0
	return mean(fst);
}

// Function to calculate the QST between two subpopulations
// Like calcFST but for QTLs, and which takes a vector of QTL mutationTypes
function (f$)calcQST(o<Subpopulation>$ subpop1, o<Subpopulation>$ subpop2, o<MutationType> QTLMutTypes)
{
	inds = sim.subpopulations.individuals;
	p1_p = float(0);
	p2_p = float(0);
	for (i in QTLMutTypes){
		qmutts = inds.genomes.mutationsOfType(i);
		p1_part = sim.mutationFrequencies(subpop1,qmutts);
		p2_part = sim.mutationFrequencies(subpop2,qmutts);
		p1_p = c(p1_p, p1_part);
		p2_p = c(p2_p, p2_part);
	}
	mean_p = (p1_p + p2_p) / 2.0;
	H_t = 2.0 * mean_p * (1.0 - mean_p);
	H_s = p1_p * (1.0 - p1_p) + p2_p * (1.0 - p2_p);
	qst = 1.0 - H_s/H_t;
	qst = qst[!isNAN(qst)];
	return mean(qst);
}

//#########################################################################################
//SET UP AND RUN SIMULATION
//#########################################################################################

initialize() {
	//##Set Some Run Parameters ##################################################
	defineConstant("Selection_strength", c(ss));
	//defineConstant("QTL_optima", c(5.0, -5.0)); // optima for *traits* 1 and 2
	defineConstant("Mutation_mix", c(pp,1,1,1)); //proportion of Pleiotropic, and CN taits
	defineConstant("Mutation_var",c(mv));
	defineConstant("K", 500); // subpop carrying capacity
	//############################################################################

	initializeSLiMModelType("nonWF");
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);   // neutral mutations
	initializeMutationType("m2", 0.5, "n", 0.0, 0.0);   // Pleiotropic QTLs
	initializeMutationType("m3", 0.5, "n", 0.0, 0.0);  // trait 1 CN QTLs
	initializeMutationType("m4", 0.5, "n", 0.0, 0.0);  // trait 2 CN QTLs
	initializeMutationType("m5", 0.5, "n", 0.0, Mutation_var); // QTLs for preference
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	m5.convertToSubstitution = F;
	m2.color = "red";
	m3.color = "purple";
	m4.color = "green";
	m5.color = "pink";
	m2.mutationStackPolicy = "l";
	m3.mutationStackPolicy = "l";
	m4.mutationStackPolicy = "l";
	m5.mutationStackPolicy = "l";

	//##Set the mix of Pleiotropic and CN QTLs####################################
	// g1 is for neutral sites. g2 is for performance and preference QTLs
	initializeGenomicElementType("g1", c(m1), c(1.0));
	initializeGenomicElementType("g2", c(m2,m3,m4,m5), Mutation_mix);
	//############################################################################

	// chromosome of length 100 kb with 10 QTL regions interspered with neutral regions
    for (index in 1:10){
        initializeGenomicElement(g1, index*10000, index*10000 + 4999);
		initializeGenomicElement(g2, index*10000 - 5000, index*10000 - 1);
	}

	// Set recombination rate
	initializeRecombinationRate(1e-4);
}

// Kill the non-neutrallness of the preference QTLs
// We don't need to do this for performance QTLs, because we code our own
// mutation generators for those. (Lets us log all mutations at those sites.)
fitness(m5) { return 1.0; } 

//In non-WF models we need to explicitly model reproduction
reproduction(){
    //Something with variable litter sizes
    //Still pretty small because otherwise the simulations get slow

    //incorporate a penalty for host preference
    m5s = individual.sumOfMutationsOfType(m5);
    pref_magnitude = size(m5s) ? abs(m5s) else 0.0;
    pref_penalty = 1 / (1 + pref_magnitude*0.1);
    litter_lambda = 2.0 * pref_penalty; //turn on or off penalty
    litterSize = rpois(1, litter_lambda);
    partner = subpop.sampleIndividuals(1);
    for (j in seqLen(litterSize)){
        subpop.addCrossed(individual, partner);
        }
}

// Specifify performance QTL mutation effect generators
mutation(m2){
	// draw mutation effect for new m2 pleiotropic mutation
	Peffect = rnorm(1, 0, Mutation_var);
	mut.setValue("ep", Peffect);
	Peffects = sim.getValue("all_P_effects");
	sim.setValue("all_P_effects", rbind(Peffects, Peffect));
	return T;
}

mutation(m3){
	// draw mutation effect for new m3 conditionally neutral mutation
	CNeffect = rnorm(1, 0, Mutation_var);
	mut.setValue("ecn", CNeffect);
	CN3effects = sim.getValue("all_CN3_effects");
	sim.setValue("all_CN3_effects", rbind(CN3effects, CNeffect));
	return T;
}

mutation(m4){
   // draw mutation effect for new m4 conditionally neutral mutation
	CNeffect = rnorm(1, 0, Mutation_var);
	mut.setValue("ecn", CNeffect);
	CN4effects = sim.getValue("all_CN4_effects");
	sim.setValue("all_CN4_effects", rbind(CN4effects, CNeffect));
	return T;
}

// Set up two subpopulations, specify their starting sizes
1 early() {
	sim.addSubpop("p1", 200);
	sim.addSubpop("p2", 200);
	sim.setValue("p1_opt", 0.0);
	sim.setValue("p2_opt", 0.0);
}

//Do habitat choice as a function of m5 mutations
//To keep things speedy all of the calculations are vectorized
early(){
    inds = sim.subpopulations.individuals;
    inds_m5 = inds.sumOfMutationsOfType(m5);
    //Starts with no preference for p1 (i.e. 50-50 prefs). That preference shifts as
    //a function of m5 mutations
    pref_p1 = 0.5 + inds_m5 * 0.5; //had tried 0.25 too. generalists galore.
    pref_p1 = pmax(pmin(pref_p1, 1.0), 0.0); // clamps preference for p1 between 0 and 1
    //maybe some ineria
    inertia = ifelse(inds.subpopulation.id == 1, 1.0, 0.0); // accounts for laziness
    pref_p1 = pref_p1 * 0.40 + inertia * 0.60; // weighted average of inertia and preference
    
    //if pref_p1 is greater than a random unif draw between 0 and 1
    // they chose p1, else, they prefer p2
    choice = ifelse(runif(inds.size()) < pref_p1, 1, 2);
    //preference only gets turned in to migration if an individual is not where they'd
    //prefer to be
    moving = inds[choice != inds.subpopulation.id];
    from_p1 = moving[moving.subpopulation == p1];
    from_p2 = moving[moving.subpopulation == p2];
    p2.takeMigrants(from_p1);
    p1.takeMigrants(from_p2);
}


//Scale fitness by performance phenotypes.
//In non-WF models fitness affects survival.
early() {
    p1_opt = sim.getValue("p1_opt");
    p2_opt = sim.getValue("p2_opt");
    inds = sim.subpopulations.individuals;
    inds[inds.age > 0].fitnessScaling = 0.0; // non-overlapping generations (buggier)
	for (ind in inds)
	{
		// construct phenotypes from additive effects of QTL mutations
		muts2 = ind.genomes.mutationsOfType(m2);
		muts3 = ind.genomes.mutationsOfType(m3);
		muts4 = ind.genomes.mutationsOfType(m4);
		baseP = size(muts2) ? sum(muts2.getValue("ep")) else 0.0;
		cnP1 = size(muts3) ? sum(muts3.getValue("ecn")) else 0.0; //0;
		cnP2 = size(muts4) ? sum(muts4.getValue("ecn")) else 0.0;// 0;
		phenotype1 = baseP + cnP1; //the sum of P and CN mutations
		phenotype2 = baseP + cnP2;
		ind.setValue("phenotype1", phenotype1);
		ind.setValue("phenotype2", phenotype2);

		// calculate fitness effects
	    scale = dnorm(p1_opt, p1_opt, Selection_strength[0]); //quantiles, mean, sd
		effect0 = dnorm(p1_opt, phenotype1, Selection_strength[0]) / scale;
		effect1 = dnorm(p2_opt, phenotype2, Selection_strength[0]) / scale;
		
		if (ind.subpopulation.id==1){
		    ind.fitnessScaling = effect0;
		    ind.tagF = effect0;
		} else {
		    ind.fitnessScaling = effect1;
		    ind.tagF = effect1;
		}
	}
}

// In non-WF models we also need to explicitly take care of population regulation
// Here we just do some crude density dependence. We do this after preferences are
// exercised and individual based fitness has been assessed. 
// Density-dependence depends on post-migration population sizes

// I cap the max of absolute fitness at 5. Otherwise it would be insanely high
// at low density.
early() {
    p1.fitnessScaling = min((K / p1.individualCount), 5.0);
    p2.fitnessScaling = min((K / p2.individualCount), 5.0);
}

//Start printing outputs after 200 generations
s1 101: late() {
	if ((sim.generation -1) % 100 == 0){
	    // Have patch optima diverge incrementally 
	    p1_opt = sim.getValue("p1_opt");
	    p2_opt = sim.getValue("p2_opt");
	    p1_new = p1_opt + 0.2;
	    p2_new = p2_opt - 0.2;
	    sim.setValue("p1_opt", p1_new);
	    sim.setValue("p2_opt", p2_new);
	
	    inds = sim.subpopulations.individuals;
		fsty = calcFST(p1, p2, m1);
		qsty = calcQST(p1, p2, c(m2,m3,m4));
		mp1P1 = size(p1.individuals) ? mean(p1.individuals.getValue("phenotype1")) else 0.0;
		mp2P2 = size(p2.individuals) ? mean(p2.individuals.getValue("phenotype2")) else 0.0;
			
		mPrefP1 = mean(p1.individuals.sumOfMutationsOfType(m5));
		mPrefP2 = mean(p2.individuals.sumOfMutationsOfType(m5));
		Np1 = size(p1.individuals);
		Np2 = size(p2.individuals);
			
		cat("-------------------------------\n");
      	cat("Output for end of generation " + (sim.generation - 1) + ":\n\n");
       		
       	// Output population additive QTL-based phenotypes
       	catn("p1 mean phenotype = " + mp1P1);
       	catn("p2 mean phenotype = " + mp2P2);
       	catn("p1 mean preference = " + mPrefP1);
       	catn("p2 mean preference = " + mPrefP2);
       	catn("p1 mean fitness = " + mean(p1.cachedFitness(NULL)));
       	catn("p2 mean fitness = " + mean(p2.cachedFitness(NULL)));
       	catn("p1 size = " + Np1);
       	catn("p2 size = " + Np2);
       		
   		if (!isNULL(qsty) & !isNULL(fsty)){
   			catn("Fst = "+fsty+" | Qst = "+qsty+" | Qst - Fst = "+(qsty-fsty));
   		}
   		townies = inds[inds.migrant==F];
	    tourists = inds[inds.migrant==T];
	    townies_W = size(townies) ? mean(townies.tagF) else 0.0;
	    tourists_W = size(tourists) ? mean(tourists.tagF) else 0.0;
	    spicy = townies_W - tourists_W;
	    catn("Number of immigrants = " + size(tourists));
	    catn("Fitness of Townies = " + townies_W + " | Fitness of Tourists = " + tourists_W);
	    catn("Wd = " + spicy);
	}
}

//Write final outputs after 10,000 generations
5000 late() {
    //Get Fst
    p1_opt = sim.getValue("p1_opt");
    FST = calcFST(p1, p2, m1);
    QST = calcQST(p1, p2, c(m2,m3,m4));
    catn("Fst: " + FST);
	// print final phenotypes versus their optima
	inds = sim.subpopulations.individuals;
	P1p2_mean = size(p2.individuals) ? mean(p2.individuals.getValue("phenotype1")) else 0.0;
	P2p1_mean = size(p1.individuals) ? mean(p1.individuals.getValue("phenotype2")) else 0.0;
	P1p1_mean = size(p1.individuals) ? mean(p1.individuals.getValue("phenotype1")) else 0.0;
	P2p2_mean = size(p2.individuals) ? mean(p2.individuals.getValue("phenotype2")) else 0.0;
	
	SumDeltaP = (abs(P1p1_mean - P1p2_mean) + abs(P2p2_mean - P2p1_mean)) / p1_opt;

	p1_sd = size(p1.individuals) ? sd(p1.individuals.getValue("phenotype1")) else 0.0;
	p2_sd = size(p2.individuals) ? sd(p2.individuals.getValue("phenotype2")) else 0.0;

	catn();
	catn("Generation: " + sim.generation);
	catn("Mean phenotype 1: " + P1p1_mean + " (5) " + "sd: " + p1_sd);
	catn("Mean phenotype 2: " + P2p2_mean + " (-5) " + "sd: " + p2_sd);
	catn("Prop. difference across subpops in Phenotype means= " + SumDeltaP);

	// get the QTL mutations and their frequencies
	m2muts = sim.mutationsOfType(m2);
	m2freqs = sim.mutationFrequencies(NULL, m2muts);
	m2freqs_p1 = sim.mutationFrequencies(p1, m2muts);
	m2freqs_p2 = sim.mutationFrequencies(p2, m2muts);

	CNmuts = c(sim.mutationsOfType(m3), sim.mutationsOfType(m4));
	CNfreqs = sim.mutationFrequencies(NULL, CNmuts);
	CNfreqs_p1 = sim.mutationFrequencies(p1, CNmuts);
	CNfreqs_p2 = sim.mutationFrequencies(p2, CNmuts);
	
    //Get number of fixedish (high freq) P and CN mutations in each patch
	fixed_P_p1 = m2muts[m2freqs_p1 >= 0.90];
	fixed_P_p2 = m2muts[m2freqs_p2 >= 0.90];
	fixed_CN_p1 = CNmuts[CNfreqs_p1 >= 0.90];
	fixed_CN_p2 = CNmuts[CNfreqs_p2 >= 0.90];
	n_fixed_P_p1 = length(fixed_P_p1);
	n_fixed_P_p2 = length(fixed_P_p2);
	n_fixed_CN_p1 = length(fixed_CN_p1);
	n_fixed_CN_p2 = length(fixed_CN_p2);
	n_fixed_P = n_fixed_P_p1 + n_fixed_P_p2;
	n_fixed_CN = n_fixed_CN_p1 + n_fixed_CN_p2;
	//n_fixed_P = size(fixed_m2) ? length(fixed_m2) else 0.0;
	//n_fixed_CN = size(fixed_cns) ? length(fixed_cns) else 0.0;
	patch_rat = n_fixed_P / n_fixed_CN;
	
	mean_fixed_P_eff_p1 = size(fixed_P_p1) ? mean(abs(fixed_P_p1.getValue("ep"))) else 0.0;
	mean_fixed_P_eff_p2 = size(fixed_P_p2) ? mean(abs(fixed_P_p2.getValue("ep"))) else 0.0;
	mean_fixed_CN_eff_p1 = size(fixed_CN_p1) ? mean(abs(fixed_CN_p1.getValue("ecn"))) else 0.0;
	mean_fixed_CN_eff_p2 = size(fixed_CN_p2) ? mean(abs(fixed_CN_p2.getValue("ecn"))) else 0.0;
	patch_eff_rat = ((abs(mean_fixed_P_eff_p1) + abs(mean_fixed_P_eff_p1))/2) / ((abs(mean_fixed_CN_eff_p1) + abs(mean_fixed_CN_eff_p2))/2);

	// get the effect sizes
	Pe = size(m2muts) ? m2muts.getValue("ep") else 0.0;
	CNe = size(CNmuts) ? CNmuts.getValue("ecn") else 0.0;
	
	n_P = sim.countOfMutationsOfType(m2);
	n_CN = sim.countOfMutationsOfType(m3) + sim.countOfMutationsOfType(m4);

	townies = inds[inds.migrant==F];
	tourists = inds[inds.migrant==T];
	townies_W = size(townies) ? mean(townies.tagF) else 0.0;
	tourists_W = size(tourists) ? mean(townies.tagF) else 0.0;
	spicy = townies_W - tourists_W;
	catn("\nSpecificity Index = " + spicy);
	
	Np1 = size(p1.individuals);
	Np2 = size(p2.individuals);
	mPrefP1 = mean(p1.individuals.sumOfMutationsOfType(m5));
	mPrefP2 = mean(p2.individuals.sumOfMutationsOfType(m5));
	
	pref_p1 = 0.5 + mPrefP1 * 0.5;
    pref_p1 = pmax(pmin(pref_p1, 1.0), 0.0); // clamps preference for p1 between 0 and 1
    pref_p2 = 0.5 + mPrefP2 * 0.5;
    pref_p2 = pmax(pmin(pref_p2, 1.0), 0.0);
    
	// output some more summary stats#############################################
	fixed_m2 = m2muts[m2freqs == 1.0];
	unfixed_m2 = m2muts[m2freqs != 1.0];
	mean_fixed_P = size(fixed_m2) ? mean(abs(fixed_m2.getValue("ep"))) else 0.0;
	mean_unfixed_P = size(unfixed_m2) ? mean(abs(unfixed_m2.getValue("ep"))) else 0.0;
	fixed_cns = CNmuts[CNfreqs == 1.0];
	unfixed_cns = CNmuts[CNfreqs != 1.0];
	mean_fixed_CN = size(fixed_cns) ? mean(abs(fixed_cns.getValue("ecn"))) else 0.0;
	mean_unfixed_CN = size(unfixed_cns) ? mean(abs(unfixed_cns.getValue("ecn"))) else 0.0;
	pPfix = length(fixed_m2) / size(sim.getValue("all_P_effects"));
	pCNfix = length(fixed_cns) / (size(sim.getValue("all_CN3_effects")) + size(sim.getValue("all_CN4_effects")));

	catn("Mean effect magnitude of fixed Pleiotropic mutations= " + mean_fixed_P);
	catn("Mean effect magnitude of unfixed Pleiotropic mutations= " + mean_unfixed_P);
	catn("Proportion of fixed P muts= " + pPfix);
	catn("Mean effect magnitude of fixed CN mutations= " + mean_fixed_CN);
	catn("Mean effect magnitude of unfixed CN mutations= " + mean_unfixed_CN);
	catn("Proportion of fixed CN muts= " + pCNfix);

	writeFile("sumnWF.csv", paste(c(pp,Selection_strength,Mutation_var,FST,QST,P1p1_mean,P2p2_mean,mean(p1.individuals.tagF),mean(p2.individuals.tagF),SumDeltaP,spicy,mean_fixed_P,mean_unfixed_P,mean_fixed_CN,mean_unfixed_CN,pPfix,pCNfix,Np1,Np2,mPrefP1,mPrefP2,pref_p1,pref_p2,n_fixed_P,n_fixed_CN,patch_rat,patch_eff_rat,n_P,n_CN),sep=','), append=T);
	sim.simulationFinished();
}
